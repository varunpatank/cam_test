// v0.0.01 salah

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

model Course {
  id           String    @id @default(uuid()) 
  userId       String
  title        String    @db.VarChar(255) 
  description  String?   @db.Text         
  imageUrl     String?   @db.Text         
  isPublished  Boolean   @default(false)
  subjectId   String?
  boardId   String?
  subject     Subject? @relation(fields: [subjectId], references: [id])
  board     Board? @relation(fields: [boardId], references: [id])
  chapters Chapter[]
  attachments  Attachment[]
  enrollment Enrollment[]
  sessionlink  String? 
  sessiondate  String?
  sessiontime  String? 
  attachmentLink String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  @@index([subjectId])
}

model Subject {
  id       String    @id @default(uuid()) 
  name     String    @unique
  courses  Course[]
}

model Board {
  id       String    @id @default(uuid()) 
  name     String    @unique
  courses  Course[]
}

model Attachment {
  id         String    @id @default(uuid()) 
  name       String
  url        String    @db.Text        

  courseId   String
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)

  sessionlink  String? 
  sessiondate  String?
  sessiontime  String? 
  
  cloudinaryData CloudinaryData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([courseId])
}
model CloudinaryData{
  id String @id @default(uuid())
  assetId String
  playbackId String?
  publicId  String 
  videoUrl  String 
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress{
  id String @id @default(uuid())
  userId String
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Enrollment{
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@unique([userId, courseId])
  @@index([courseId])
}

model Profile {
  id        String  @unique @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]
  members   Member[]
  chats     Chat[]
}


model Room {
  id          String   @id @default(uuid())
  name        String
  imageUrl    String
  inviteCode  String @unique
  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     Member[]
  chats       Chat[]
     
  @@index([profileId])
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(GUEST)
  roomId    String
  room      Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsRecieved Conversation[] @relation("MemberTwo")

  @@index([profileId])
  @@index([roomId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Chat {
  id        String   @id @default(uuid())
  name      String
  type      ChatType @default(TEXT)
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  messages Message[]
  @@index([profileId])
  @@index([roomId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChatType {
  TEXT
  AUDIO
  VIDEO
}
model Message{
  id String @id @default(uuid())
  content String
  fileUrl String?
  memberId String
  member   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  chatId String
  chat   Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  deleted Boolean @default(false)
  @@index([chatId])
  @@index([memberId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Conversation{
  id String @id @default(uuid())
  memberOneId String
  memberOne  Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo  Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])
  directMessages DirectMessage[]
}
model DirectMessage{
  id String @id @default(uuid())
  content String
  fileUrl String?
  memberId String
  member   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted Boolean @default(false)
  @@index([conversationId])
  @@index([memberId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Tutor {
  id     Int    @id @default(autoincrement())
  userId String @unique
}

model Note {
  id           String    @id @default(uuid()) 
  userId       String
  title        String    @db.VarChar(255) 
  description  String?   @db.Text         
  imageUrl     String?   @db.Text         
  notesubjectId   String?
  isPublished  Boolean   @default(false)
  noteboardId   String?
  notesubject     NoteSubject? @relation(fields: [notesubjectId], references: [id])
  noteboard     NoteBoard? @relation(fields: [noteboardId], references: [id])
  notechapters NoteChapter[]
  noteattachments  NoteAttachment[]
  added Added[]
  sessionlink  String? 
  sessiondate  String?
  sessiontime  String? 
  attachmentLink String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  @@index([notesubjectId])
}
model NoteAttachment {
  id         String    @id @default(uuid()) 
  name       String
  url        String    @db.Text        

  noteId   String
  note     Note    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@index([noteId])
}
model NoteSubject {
  id       String    @id @default(uuid()) 
  name     String    @unique
  notes  Note[]
}

model NoteBoard {
  id       String    @id @default(uuid()) 
  name     String    @unique
  notes  Note[]
}

model Added{
  id String @id @default(uuid())
  userId String

  noteId String
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@unique([userId, noteId])
  @@index([noteId])
}

model NoteCloudinaryData{
  id String @id @default(uuid())
  assetId String
  playbackId String?
  publicId  String 
  videoUrl  String 
  notechapterId String @unique
  notechapter NoteChapter @relation(fields: [notechapterId], references: [id], onDelete: Cascade)
}

model NoteUserProgress{
  id String @id @default(uuid())
  userId String
  notechapterId String @unique
  notechapter NoteChapter @relation(fields: [notechapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@index([notechapterId])
  @@unique([userId, notechapterId])
}
model NoteChapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)

  sessionlink  String? 
  sessiondate  String?
  sessiontime  String? 
  
  cloudinaryData NoteCloudinaryData?

  noteId String
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  noteuserProgress NoteUserProgress[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([noteId])
}
model UserModel {
  id String @id @default(uuid())
  userId    String  @unique
  name      String 
  imageUrl  String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followers Int      @default(0)
  following Int      @default(0)
  biog      String
  XP        Int      @default(5)
  tags      Tag[]    @relation("UserTags")
  
  // Define a one-to-many relationship for followers (inverse relation for `Follow` model)
  followedBy Follow[] @relation("FollowedBy")
  
  // Define a one-to-many relationship for following (inverse relation for `Follow` model)
  followingUsers Follow[] @relation("Following")
}

model Follow {
  id        String   @id @default(uuid())
  followerId String
  followedId String
  
  // Relationships to the User model
  follower  UserModel @relation("Following", fields: [followerId], references: [id])
  followed  UserModel @relation("FollowedBy", fields: [followedId], references: [id])

  // Prevent duplicate follows by making the pair of follower and followed unique
  @@unique([followerId, followedId])
}

model Tag {
  id    String   @id @default(uuid())
  name  String  
  users UserModel[] @relation("UserTags")
}


model Sprint {
  id            String   @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String
  imageFullUrl  String
  imageUserName String
  imageLinkHTML String
  isTemplate    Boolean  @default(false) 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lists         List[]
}
model List {
  id        String   @id @default(uuid())
  title     String
  order     Int
  sprintId   String
  sprint     Sprint    @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sprintId])
}

model Task {
  id          String   @id @default(uuid())
  title       String
  order       Int
  description String?  @db.Text
  listId      String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime?
  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  SPRINT
  LIST
  TASK
}

model AuditLog {
  id          String      @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
